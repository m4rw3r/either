var searchIndex = {};
searchIndex['either'] = {"items":[[0,"","either","The enum `Either`.",null,null],[4,"Either","","`Either` represents an alternative holding one value out of\neither of the two possible values.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"either"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"either"},{"name":"either"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"either"}],"output":{"name":"either"}}],[11,"is_left","","",0,{"inputs":[{"name":"either"}],"output":{"name":"bool"}}],[11,"is_right","","",0,{"inputs":[{"name":"either"}],"output":{"name":"bool"}}],[11,"left","","",0,{"inputs":[{"name":"either"}],"output":{"name":"option"}}],[11,"right","","",0,{"inputs":[{"name":"either"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"either"}],"output":{"name":"either"}}],[11,"as_mut","","",0,{"inputs":[{"name":"either"}],"output":{"name":"either"}}],[11,"flip","","",0,{"inputs":[{"name":"either"}],"output":{"name":"either"}}],[11,"from","","",0,{"inputs":[{"name":"either"},{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"either"}],"output":{"name":"result"}}],[11,"next","","",0,{"inputs":[{"name":"either"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"either"}],"output":{"name":"option"}}],[11,"read","","",0,null],[11,"read_to_end","","",0,{"inputs":[{"name":"either"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",0,{"inputs":[{"name":"either"}],"output":{"name":"result"}}],[11,"consume","","",0,{"inputs":[{"name":"either"},{"name":"usize"}],"output":null}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"either"}],"output":{"name":"result"}}],[11,"as_ref","","",0,{"inputs":[{"name":"either"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"either"}],"output":{"name":"target"}}],[11,"deref","","",0,{"inputs":[{"name":"either"}],"output":{"name":"target"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"either"}],"output":{"name":"target"}}],[11,"description","","",0,{"inputs":[{"name":"either"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"either"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"either"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left!","","Macro for unwrapping the left side of an `Either`, which fails early\nwith the opposite side. Can only be used in functions that return\n`Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right!","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
initSearch(searchIndex);
